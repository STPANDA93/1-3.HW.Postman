{
	"info": {
		"_postman_id": "6ffb839c-7b17-4a21-8934-55ec9ae4cd10",
		"name": "PostmanHW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Check true string comes in body\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Peter\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function() {\r",
							"    pm.expect(resp.age).to.eql(\"32\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(40000)\r",
							"})\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test request name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test request age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function() {\r",
							"    pm.expect(resp.salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family=\", resp.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Your salary 1.5 year\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Peter",
							"type": "default"
						},
						{
							"key": "age",
							"value": "32",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "40000",
							"type": "default"
						},
						{
							"key": "family",
							"value": "Alex",
							"type": "default",
							"disabled": true
						},
						{
							"key": "children",
							"value": "Alex",
							"type": "default",
							"disabled": true
						},
						{
							"key": "children",
							"value": "Kate",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family =\" , resp.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check Dog Name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check Dog Age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog name is Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age is 4\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Polina&age=25&salary=30000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Polina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "30000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json ();\r",
							"//Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(resp.age).to.eql(parseInt(req.age));\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary= \" , req.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary= \" , resp.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary= \" , resp.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary= \" , resp.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary= \" , resp.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[0] = salary from request\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[1] = salary*2 from request\", function () {\r",
							"    pm.expect(parseInt(resp.salary[1])).to.eql(req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[2] = salary*3 from request\", function () {\r",
							"    pm.expect(parseInt(resp.salary[2])).to.eql(req.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"//17. Создать в окружении переменную age\r",
							"//18. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"//19. Создать в окружении переменную salary\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var a = resp.salary.length;\r",
							"for (var i = 0; i < a; i++) {\r",
							"console.log(\"RESULT= \", resp.salary[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Antony&age=48&salary=26000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Antony"
						},
						{
							"key": "age",
							"value": "48"
						},
						{
							"key": "salary",
							"value": "26000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json ();\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check Start QA salary\", function () {\r",
							"    pm.expect(Object.keys(resp)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check QA salary after 6 months\", function () {\r",
							"    pm.expect(Object.keys(resp)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check QA salary after 12 months\", function () {\r",
							"    pm.expect(Object.keys(resp)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check QA salary after 1.5 year\", function () {\r",
							"    pm.expect(Object.keys(resp)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check QA salary after 3.5 year\", function () {\r",
							"    pm.expect(Object.keys(resp)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check have person param\", function () {\r",
							"    pm.expect(Object.keys(resp)).to.include(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary = salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(parseInt(req.salary*2));\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months = salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(parseInt(req.salary*2.7));\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(req.salary*3.3));\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_year = salary*3.8\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(req.salary*3.8));\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_name[1] = salary from request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age = age from request\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(parseInt(req.age));\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(parseInt(req.salary*4.2));\r",
							"});\r",
							"//22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var name_key = Object.keys(resp.person);\r",
							"var person_order = resp.person;\r",
							"console.log(name_key[0]+ \": \" + person_order.u_age);\r",
							"for (var i = 0; i < person_order.u_name.length; i++){\r",
							"    console.log(name_key[1]+ \": \" + person_order.u_name[i])\r",
							"}\r",
							"console.log(name_key[2]+ \": \" + person_order.u_salary_5_years);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}